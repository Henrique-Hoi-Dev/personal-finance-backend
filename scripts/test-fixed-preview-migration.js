#!/usr/bin/env node

/**
 * Script para testar a migra√ß√£o de FIXED_PREVIEW para isPreview
 *
 * Este script:
 * 1. Verifica se existem contas FIXED_PREVIEW no banco
 * 2. Executa a migra√ß√£o de dados
 * 3. Verifica se a migra√ß√£o foi bem-sucedida
 * 4. Testa se as consultas funcionam com a nova estrutura
 */

const { sequelize } = require('../config/database');
const Account = require('../app/api/v1/business/account/account_model');

async function testMigration() {
    console.log('üß™ Iniciando teste da migra√ß√£o FIXED_PREVIEW -> isPreview...\n');

    try {
        // 1. Verificar estado inicial
        console.log('üìä 1. Verificando estado inicial do banco...');

        const [initialFixedPreview] = await sequelize.query(
            `SELECT COUNT(*) as count FROM accounts WHERE type = 'FIXED_PREVIEW'`,
            { type: sequelize.QueryTypes.SELECT }
        );

        const [initialFixedWithPreview] = await sequelize.query(
            `SELECT COUNT(*) as count FROM accounts WHERE type = 'FIXED' AND is_preview = true`,
            { type: sequelize.QueryTypes.SELECT }
        );

        console.log(`   - Contas FIXED_PREVIEW: ${initialFixedPreview[0].count}`);
        console.log(`   - Contas FIXED com isPreview=true: ${initialFixedWithPreview[0].count}\n`);

        // 2. Executar migra√ß√£o de dados
        console.log('üîÑ 2. Executando migra√ß√£o de dados...');

        const migration = require('../migrations/20241201000027-migrate-fixed-preview-to-ispreview');
        await migration.up(null, sequelize);

        console.log('   ‚úÖ Migra√ß√£o de dados conclu√≠da\n');

        // 3. Verificar estado ap√≥s migra√ß√£o
        console.log('üìä 3. Verificando estado ap√≥s migra√ß√£o...');

        const [afterFixedPreview] = await sequelize.query(
            `SELECT COUNT(*) as count FROM accounts WHERE type = 'FIXED_PREVIEW'`,
            { type: sequelize.QueryTypes.SELECT }
        );

        const [afterFixedWithPreview] = await sequelize.query(
            `SELECT COUNT(*) as count FROM accounts WHERE type = 'FIXED' AND is_preview = true`,
            { type: sequelize.QueryTypes.SELECT }
        );

        console.log(`   - Contas FIXED_PREVIEW: ${afterFixedPreview[0].count}`);
        console.log(`   - Contas FIXED com isPreview=true: ${afterFixedWithPreview[0].count}\n`);

        // 4. Testar consultas com nova estrutura
        console.log('üîç 4. Testando consultas com nova estrutura...');

        // Testar busca por contas FIXED com isPreview=true
        const fixedPreviewAccounts = await Account.findAll({
            where: {
                type: 'FIXED',
                isPreview: true
            }
        });

        console.log(`   - Contas FIXED com isPreview=true encontradas: ${fixedPreviewAccounts.length}`);

        // Testar busca por contas FIXED normais
        const fixedAccounts = await Account.findAll({
            where: {
                type: 'FIXED',
                isPreview: false
            }
        });

        console.log(`   - Contas FIXED normais encontradas: ${fixedAccounts.length}\n`);

        // 5. Verificar se n√£o h√° mais refer√™ncias a FIXED_PREVIEW
        console.log('üîç 5. Verificando se n√£o h√° mais refer√™ncias a FIXED_PREVIEW...');

        if (afterFixedPreview[0].count === 0) {
            console.log('   ‚úÖ Nenhuma conta FIXED_PREVIEW encontrada - migra√ß√£o bem-sucedida!');
        } else {
            console.log('   ‚ö†Ô∏è  Ainda existem contas FIXED_PREVIEW - verificar migra√ß√£o');
        }

        // 6. Testar funcionalidade de c√°lculo de saldo
        console.log('\nüí∞ 6. Testando funcionalidade de c√°lculo de saldo...');

        const TransactionService = require('../app/api/v1/business/transaction/transaction_service');
        const transactionService = new TransactionService();

        // Buscar um usu√°rio para teste
        const [users] = await sequelize.query('SELECT id FROM "Users" LIMIT 1', { type: sequelize.QueryTypes.SELECT });

        if (users.length > 0) {
            const userId = users[0].id;
            const currentDate = new Date();

            try {
                const balance = await transactionService.getUserBalance(userId, {
                    month: currentDate.getMonth() + 1,
                    year: currentDate.getFullYear()
                });

                console.log(
                    `   ‚úÖ C√°lculo de saldo funcionando - Total contas fixas: R$ ${balance.fixedAccountsTotal}`
                );
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Erro no c√°lculo de saldo: ${error.message}`);
            }
        }

        console.log('\nüéâ Teste da migra√ß√£o conclu√≠do com sucesso!');
        console.log('\nüìã Pr√≥ximos passos:');
        console.log('   1. Execute a migra√ß√£o 20241201000028-remove-fixed-preview-from-enum.js');
        console.log('   2. Teste a aplica√ß√£o para garantir que tudo funciona');
        console.log('   3. Remova este script de teste ap√≥s confirma√ß√£o');
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    } finally {
        await sequelize.close();
    }
}

// Executar teste se chamado diretamente
if (require.main === module) {
    testMigration();
}

module.exports = { testMigration };
